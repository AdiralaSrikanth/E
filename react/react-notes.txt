D21/J14
With react we can build web apps - runs on browser, native mobile apps and desktop app

Why should I learn react?
Reasons:
1. React library itself -
Small learning curve we can up and running with fundamentals of react in short time.
The Core idea is - Components.
ex: login, application header. Multiple Components together end up a complete application 
Components based architecture forces you to break complex app into small peices 
which are easy to build, maintain, test & debug
React is fast. Renders and rerenders app very quickly. 
keep up to date with the latest changes in ur app data

Can build web and mobile apps

2. React Community
Active Community. You dont have to reinvent the wheel again. 
you will have react libraries like calendar picker, drag and drop data in ur app
Great resources - tutorials etc.
fb,uber,netflix,twitter uses react.

code.visualstudio.com download & install it. developed by microsoft.

nodejs.org -- download and install it. node -v --version of node
npm comes along with node

NPM - node pkg manager
helps installing various dependencies like yarn, react etc
npm and yarn are similar
npm -v --version of npm
npm install -g yarn - we are installing yarn globally
yarn --version

Indecision app:
Create a public folder - assets that we are going to serve up
1. create html file under public folder - index.html

install live-server   ----live reload
yarn global add liver-server 
global - adding globally
add - install
live-server - module name
live-server -v --> version

yarn globally install modules, it does not add location to the path when you try
to use in terminal we get errors
npm install -g live-server.

now serve up public directory ---- run it from correct folder(where public folder is present) 
live-server public

JSX - Javascript xml, templating syntax provided by react. makes easy to build
structure of our application. everything we return to the screen is return in jsx.

install react
***Load React library using CDN. later on we load in react,react dom,router & redux using webpack.
in the html file use script tag and in src = "load react library CDN"
under body tag, 
<script src="https://unpkg.com/react@version/umd/react.development.js"></script>
version 15 or 16
you can find it in unpkg.com {google}

1. react - CDN
react can be used in diff context - react-vr , react-native 
2. react-dom - react in browser //to use react in browser we use react-dom CDN
3. local js file under scripts folder under public

After writing react,react-dom in src attribute of script tag, start the server and check
react and react-dom variables in console. these are displaying only because we added them in script tag
they arw global react and global ReactDOM

JSX - Javascript XML {Javascript syntax extension}, provided by react.
define template, can inject/insert data into those templates.

scss,less - gives variable support and are lang extensions for css
similarly jsx is lang extension for react

D25
under app.js
var template = <p>This is JSX from app.js</p> //this is JSX

to render above template,
ReactDOM.render() //render method in ReactDOM is going to render our app.
render method takes two arguments
1. JSX, - template
2. dom element - where you want to render 

var template = <p>This is JSX from app.js</p>
var appRoot = document.getElementById('app') //defined a div tag and assigned id as app in index.html

reactDOM.render(template, appRoot)

we will get the error as unexpected token <

chrome does not know what jsx is. jsx is not js, its a extension.
solution for above issue is take in JSX and convert it to Javascript
we use tool Babel to do this. (babel is a Javascript compiler.)
babeljs.io website

babel takes ES6 and ES7 code and compiles to ES5 code
Browsers like IE8 or 9 do not add latest features like arrow functions etc. 
using babel we can write arrow 
functions but at the end of the day it is es5 code in browser 

In babel site try it out page,
var template = <p>This is JSX from app.js</p>

compiles to old js functions which browser can understand. <p>JSX</>, is converted to React.createElement() -- regular function call browser can understand
var template = React.createElement(
    'p',
    null,
    'This is JSX from app.js'
)

'p' - element 
null - these are attributes here it is null. when you add id="app" it will show as {id:"app"} instead of null. JSX attributes
last one is of content.

copy above React.createElement() code and put in vs code and comment the jsx line code and start the server. 
it renders content on browser

Installing and setting up babel locally:
this will allow you to write jsx in ur editor and automatically compiles to React.createElement method call
and renders in browser/able to view output instantly.

Babel is a compiler. Its not gonna compile by its own. we have to add plugins and presets in order to convert jsx to React.createElement
on try it out page of babel site, it already selected few presets - few checkboxes(es2015, react) selected 
preset - is a group of plugins

we need to include react-preset to convert jsx to React.createElement which browsers can understand

go to babel site > doc > plugins page.

1. click on react preset, it has plugins part of it. 
all these sub plugins are responsible for to convert jsx to React.CreateElement
2. preset -env which has es2015,16,17. now we can use latest js features- arrows functions, const, rest and spread operators etc

install 3 things
Babel
presets: react and env

yarn global add babel-cli@6.24.1

if you face any errors use npm install -g babel-cli@6.24.1

Gives access to command line interface to use babel compiler. but it does not give latest js features.

babel --help
lists all available commands if installed correctly

install react and env install locally in our proj, they wont give any commands like react or env instead
babel cli use it to convert jsx to CreateElement calls

yarn init ---specify dependencies
hit enter

generates new file - package.json file - outline all of the dependencies

yarn add babel-preset-react@6.24.1 babel-preset-env@1.5.2 {chain up of dependencies}

after running the above command, there will be dependencies key value pair in package.json file and node_modules folder
under root of the project. all the dependency modules and sub modules are downloaded and placed under node_modules

yarn.lock file - lists out all the dependencies that used in node_modules with specific versions and from where we got that pkg

use babel
goal is to create one file and that file we change, then we gonna have another file get generated with compiled code 

folder
src/app.js  - we write all of the react code (JSX) in this file

folder that we created earlier
public/scripts/app.js --- auto generated compiled code will be generated here.(jsx to React.CreateElement call)
and index.html file gonna render this file

in terminal type in babel command

babel <path to our code which we want to compile> --out-file=<output file, overwrite this file for every babel run> <presets we want to use, comma seperated presets>

ex: babel src/app.js --out-file=public/scripts/app.js --presets=env,react
hit enter. no errors

go to public/scripts/app.js and observe compiled code i.e React.CreateElement call
Add --watch command, it watch scripts/app.js file and if there is a change in src/app.js file, 
it gonna generate compiled code again (bascically for every change)
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

make changes to src/app.js file and save, observe scripts/app.js gets change.

start live-server serving up public folder   -- live-server public ---> opens up server and serves up html in browser.
as of now src/app.js > changes >babel saw change> compiled new code in scripts/app.js > mapped in index.html > live-server saw change in scripts/app.js>
 >restars server > renders index.html in browser.

can delete node_modules folder, can be reinstalled all the versions using yarn install, looks through pkg.json and installs all dependencies

add babel extension in vsc for syntax highlighting

lets add another tag to template
var template = <h1>Indecision app</h1><p>some paragraph</p>

when you save src/app.js babel recognize the changes and compiled code will be generated but here we get error

see the error in terminal

syntax error: src/app.js Adjacent JSX elements must be wrapped in an enclosing tag
with JSX we only have one root element
wrap h1 and p inside a div {wrapper div}

var template = <div><h1>Indecision app</h1><p>some paragraph</p></div>
valid jsx

for looking good - readabiltiy we can wrap jsx inside ()
var template = (
    <div>
        <h1>Indecision app</h1>
        <p>some paragraph</p>
        <ol>
            <li>Item One</li>
            <li>Second Item</li>
        </ol>
    </div>
    );

you can see how the above code gets compiled in scripts/app.js file. foe each tag, React.CreateElement(..) will be created

Instead of rendering static data we can render dynamic data in jsx
var userName = 'srk'
var age = 27
var templateOne = (
    <div>
        <h1>{userName}</h1> //we should use {} to use dynamic data in JSX, inside {}, it takes Javascript expression here we are referencing userName variable
        
        <p>{userName.toUpperCase()}</p> //inside {}, we can use + to concat or string methods like toUpperCase() etc
        <ol>
            <li>Age : {age}</li> //combo of static text and dynamic var value
            <li>Second Item</li>
        </ol>
    </div>
    );
var appRoot = document.getElementById('app')    
ReactDOM.render(templateOne, appRoot)

Above we used string and number. now we will use object

var user = {
    name: "srk"
    age: 26
}

var template = (
    <div>
        <h1>{user.name}</h1> //u cannot directly put object as user,react does not understand, it crashes and do not render anything. we have to use obj.prop
        <p>{user}</p> //error in console - objects are not valid as a react child
        <ol>
            <li>Item One</li>
            <li>Second Item</li>
        </ol>
    </div>
    );


























































































