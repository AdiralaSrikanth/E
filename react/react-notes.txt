D21/J14
With react we can build web apps - runs on browser, native mobile apps and desktop app

Why should I learn react?
Reasons:
1. React library itself -
Small learning curve we can up and running with fundamentals of react in short time.
The Core idea is - Components.
ex: login, application header. Multiple Components together end up a complete application 
Components based architecture forces you to break complex app into small peices 
which are easy to build, maintain, test & debug
React is fast. Renders and rerenders app very quickly. 
keep up to date with the latest changes in ur app data

Can build web and mobile apps

2. React Community
Active Community. You dont have to reinvent the wheel again. 
you will have react libraries like calendar picker, drag and drop data in ur app
Great resources - tutorials etc.
fb,uber,netflix,twitter uses react.

code.visualstudio.com download & install it. developed by microsoft.

nodejs.org -- download and install it. node -v --version of node
npm comes along with node

NPM - node pkg manager
helps installing various dependencies like yarn, react etc
npm and yarn are similar
npm -v --version of npm
npm install -g yarn - we are installing yarn globally
yarn --version

Indecision app:
Create a public folder - assets that we are going to serve up
1. create html file under public folder - index.html

install live-server   ----live reload
yarn global add liver-server 
global - adding globally
add - install
live-server - module name
live-server -v --> version

yarn globally install modules, it does not add location to the path when you try
to use in terminal we get errors
npm install -g live-server.

now serve up public directory ---- run it from correct folder(where public folder is present) 
live-server public

JSX - Javascript xml, templating syntax provided by react. makes easy to build
structure of our application. everything we return to the screen is written in jsx.

install react
***Load React library using CDN. later on we load in react,react dom,router & redux using webpack.
in the html file use script tag and in src = "load react library CDN"
under body tag, 
<script src="https://unpkg.com/react@version/umd/react.development.js"></script>
version 15 or 16
you can find it in unpkg.com {google}

1. react - CDN
react can be used in diff context - react-vr , react-native 
2. react-dom - react in browser //to use react in browser we use react-dom CDN
3. local js file under scripts folder under public

After writing react,react-dom in src attribute of script tag, start the server and check
react and react-dom variables in console. these are displaying only because we added them in script tag
they are global react and global ReactDOM

JSX - Javascript XML {Javascript syntax extension}, provided by react.
define template, can inject/insert data into those templates.

scss,less - gives variable support and are lang extensions for css
similarly jsx is lang extension for react

D25
under app.js
var template = <p>This is JSX from app.js</p> //this is JSX

to render above template,
ReactDOM.render() //render method in ReactDOM is going to render our app.
render method takes two arguments
1. JSX, - template
2. dom element - where you want to render 

var template = <p>This is JSX from app.js</p>
var appRoot = document.getElementById('app') //defined a div tag and assigned id as app in index.html

ReactDOM.render(template, appRoot)

we will get the error as unexpected token <

chrome does not know what jsx is. jsx is not js, its a extension.
solution for above issue is take in JSX and convert it to Javascript
we use tool Babel to do this. (babel is a Javascript compiler.)
babeljs.io website

babel takes features from ES6 and ES7 code and compiles to ES5 code
Browsers like IE9 or 10 do not add latest features like arrow functions etc. 
using babel we can write arrow 
functions but at the end of the day it is es5 code in browser 

In babel site try it out page,
var template = <p>This is JSX from app.js</p>

compiles to old js functions which browser can understand. <p>JSX</>, is converted to React.createElement() -- regular function call browser can understand
var template = React.createElement(
    'p',
    null,
    'This is JSX from app.js'
)

'p' - element 
null - these are attributes here it is null. when you add id="app" it will show as {id:"app"} instead of null. JSX attributes
last one is of content.

copy above React.createElement() code and put in vs code and comment the jsx line code and start the server. 
it renders content on browser

Installing and setting up babel locally:
this will allow you to write jsx in ur editor and automatically compiles to React.createElement method call
and renders in browser/able to view output instantly.

Babel is a compiler. Its not gonna compile by its own. we have to add plugins and presets in order to convert jsx to React.createElement
on try it out page of babel site, it already selected few presets - few checkboxes(es2015, react) selected 
preset - is a group of plugins

we need to include react-preset to convert jsx to React.createElement which browsers can understand

go to babel site > doc > plugins page.

1. click on react preset, it has plugins part of it. 
all these sub plugins are responsible for to convert jsx to React.CreateElement
2. preset -env which has es2015,16,17. now we can use latest js features- arrows functions, const, rest and spread operators etc

install 3 things
Babel
presets: react and env

yarn global add babel-cli@6.24.1

if you face any errors use npm install -g babel-cli@6.24.1

Gives access to command line interface to use babel compiler. but it does not come with es6,7.. js features or JSX support.

babel --help
lists all available commands if installed correctly

install react and env install locally in our proj, they wont give any commands like react or env instead we need their 
code to live in our project
babel cli use it to convert jsx to createElement calls

yarn init ---specify dependencies
hit enter

generates new file - package.json file - outline all of the dependencies

yarn add babel-preset-react@6.24.1 babel-preset-env@1.5.2 {chain up of dependencies}

after running the above command, there will be dependencies key value pair in package.json file and node_modules folder
under root of the project. all the dependency modules and sub modules are downloaded and placed under node_modules

yarn.lock file - lists out all the dependencies that used in node_modules with specific versions and from where we got that pkg

use babel
goal is to create one file and that file we change, then we gonna have another file get generated with compiled code 

folder
src/app.js  - we write all of the react code (JSX) in this file

folder that we created earlier
public/scripts/app.js --- auto generated compiled code will be generated here.(jsx to React.CreateElement call)
and index.html file gonna render this file

in terminal type in babel command

babel <path to our code which we want to compile> --out-file=<output file, overwrite this file for every babel run> <presets we want to use, comma seperated presets>

ex: babel src/app.js --out-file=public/scripts/app.js --presets=env,react
hit enter. no errors

go to public/scripts/app.js and observe compiled code i.e React.CreateElement call
Add --watch command, it watches scripts/app.js file and if there is a change in src/app.js file, 
it gonna generate compiled code again (bascically for every change)
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

make changes to src/app.js file and save, observe scripts/app.js gets change.

start live-server serving up public folder   -- live-server public ---> opens up server and serves up html in browser.
as of now src/app.js > changes >babel saw change> compiled new code in scripts/app.js > mapped in index.html > live-server saw change in scripts/app.js>
 >restars server > renders index.html in browser.

can delete node_modules folder, can be reinstalled all the versions using yarn install, looks through pkg.json and installs all dependencies

add babel extension in vsc for syntax highlighting

lets add another tag to template
var template = <h1>Indecision app</h1><p>some paragraph</p>

when you save src/app.js babel recognize the changes and compiled code will be generated but here we get error

see the error in terminal

syntax error: src/app.js Adjacent JSX elements must be wrapped in an enclosing tag
with JSX we only have one root element
wrap h1 and p inside a div {wrapper div}

var template = <div><h1>Indecision app</h1><p>some paragraph</p></div>
valid jsx

for looking good - readabiltiy we can wrap jsx inside ()
var template = (
    <div>
        <h1>Indecision app</h1>
        <p>some paragraph</p>
        <ol>
            <li>Item One</li>
            <li>Second Item</li>
        </ol>
    </div>
    );

you can see how the above code gets compiled in scripts/app.js file. for each tag, React.CreateElement(..) will be created

Instead of rendering static data we can render dynamic data in jsx
{} - takes in js expression.
var userName = 'srk'
var age = 27
var templateOne = (
    <div>
        <h1>{userName}</h1> //we should use {} to use dynamic data in JSX, inside {}, it takes Javascript expression here we are referencing userName variable
        
        <p>{userName.toUpperCase()}</p> //inside {}, we can use + to concat or string methods like toUpperCase() etc
        <ol>
            <li>Age : {age}</li> //combo of static text and dynamic var value
            <li>Second Item</li>
        </ol>
    </div>
    );
var appRoot = document.getElementById('app')    
ReactDOM.render(templateOne, appRoot)

Above we used string and number. now we will use object

var user = {
    name: "srk"
    age: 26
}

var template = (
    <div>
        <h1>{user.name}</h1> //u cannot directly put object as user,react does not understand, it crashes and do not render anything. we have to use obj.prop
        <p>{user}</p> //error in console - objects are not valid as a react child
        <ol>
            <li>Item One</li>
            <li>Second Item</li>
        </ol>
    </div>
    );
J24
Conditional rendering in JSX
if statements, ternary operators and logical & {and} operator.

we cannot put if statement in {}, it is the place for Javascript expression. we can define a separate function and call it in {}

var user = {
    name: 'andy',
    age: 26,
    location: 'philly'
}
function getLocation(location) {
    if(location){
        return location
    }else{
        return 'unknown'
    }
}
var templateTwo = (
    <div>
        <h1>{user.name}</h1>
        <p> Age: {user.age}</p>
        <p>location: {getLocation(user.location)}</p> //1. we can call function from Javascript expression in jsx 2. used if statement.
    </div>
)

we can simplify the above templateTwo and getLocation function call.
1. function can return jsx expression
2. if the value from func call is undefined, then it wont render anything. 

function getLocation(location) {
    if(location){
        return <p>location: {user.location}</p>
    }
}
var templateTwo = (
    <div>
        <h1>{user.name}</h1>
        <p> Age: {user.age}</p>
        {getLocation(user.location)} //if it returns undefined then the element wont render in UI. if it returns true then that element will be visible.
    </div>
)
ternary operator:
will work on h1 tag, if there is username render name else display anonymous. we will use Ternary operator
 <h1> {user.name ? user.name.toUpperCase() : 'Anonymous'}</h1>

ternary operator is a expression we can use it inside {}. 
if true? execute this: else executethis
ex: true? 'name': 'anonymous'

boolean,null and undefined are ignored by JSX
Logical AND:

ex: if the user is less than 18, we dont display his age
true && 'someapps'
o/p - someapps

if the first one is true then statement two is executed or returned.
false && 'someapps'
o/p : false
first value false will be returned. if it false, it will be ignored by jsx

{(user.age && user.age >= 18) && <p>{user.age}</p>}
first will check for user.age if exists checks for age >=18 else renders nothing
if age is >=18 then rendres p tag, user.age else do nothing

Conditional rendering smry:
1. ternary is great for - Condition if you want to do one of two things true?printthis:elseprintthis
2. logical and great for - if you want to do one thing else do nothing. true && execute this
3. can make a functional call {getLocation()} //if the value is undefined renders nothing

var user = {
    name: 'andy',
    age: 26,
    location: 'philly'
}
function getLocation(location) {
    if(location){
    return <p>location: {user.location}</p>
    }
}
var templateTwo = (
    <div>
       <h1> {user.name ? user.name.toUpperCase() : 'Anonymous'}</h1>
        {(user.age && user.age >= 18) && <p>{user.age}</p>}
        {getLocation(user.location)}
    </div>
)
Task:
1. only render the subtitle (and a p tag) if subtitle exists- logical AND operator
2. render new p tag - if options.length>0 "Here are you options" else "No options" - ternary
var app = {
    title: 'Indecision App',
    subTitle: 'Put your life in the hands of a computer',
    options: ['one', 'two']
}
var templateTwo = (
    <div>
        <h1>{app.title}</h1>
        {app.subTitle && <p>{app.subTitle}</p>}
       <p> {(app.options.length >0) ? 'Here are your options' : 'No options' }</p>
    </div>
)
J25
Const and let:
var - tons of code is in prod but creates some problems.
var name = 'srk'
name = 'mike'
console.log('name', name)

with var we can not only reassign a value but can re define 
var name = 'srk'
var name = 'mike'
console.log('name', name)
above statements are valid with var based variables. o/p is mike
overwriting the variable values and hence creates problems

let nameLet = 'srk'
nameLet = 'mike'
console.log(nameLet)
with let we can reassign a var but cannot redefine. error: duplicate declaration "nameLet" -es6

with const we cannot reassign or redefine variable values
const nameLet = 'srk'
nameLet = 'mike' //error
const nameLet = 'mike' //error
console.log(nameLet)

Scope:
var based variables are function scoped. cannot access var which is defined inside a func in outside of func.

function getPetName() {
    var petName = 'Hai';
    return petName
}
getPetName()
c.l(petName) //error. petName is not defined

let and const are also function scoped. will get the same error if we define same above func.
but they are also block level scoped

bound to code blocks - if statement, for loop

var fullName = 'React Javascript'
if(fullName){
    var firstName = fullName.split(' ')[0] //spliting string into array of strings and accessing   
                             //first index one
}
c.l(firstName)
var fullName and firstName are on same scope. we did not define func to change var variable scope
meaning you can access c.l(firstName) will get the output

if you define firstName variable as const or let, you will get error

if(fullName){
    let firstName = fullName.split(' ')[0] 
      c.l(firstName)
}
c.l(firstName) //error - firstName is not defined.

Arrow functions:
arrow functions are anonymous functions.
const squareArrow = (x) => x*x
we do not have to use return statement and {}, if we return only one expression.

details of arrow functions
1. do not bound arguments object
const add = function (a, b) {
    c.l(arguments)  //arguments object returns array of passed arguments
    return a + b
}
c.l(add(1,2,3)) //returns 3

but when we use arrow func, we get error for arguments statement. arguments is not defined

2. this keyword no longer bound when using arrow functions.

const user = {
    name: 'srk',
    cities: ['hyd','mumbai', 'pune']
    printPlacesLived: function() {
        //when you define a method inside a obj, this key is bound to that obj
        //can access this.name and this.cities

    this.cities.forEach(function (city) {
        c.l(this.name + ' has lived in '+ city)
    })
    }
}
when we run above program we get error as Type error: cannot read property 'name' of undefined

when you add a func on to an prop of obj, this value is bind to that obj
when you define a anonymous func, not bind this value, it is set to undefined

with es6 arrow func, your func no longer bind their own this value. instead they just use this
 value of the context that they were created in.

    func in forEach uses parent this value, here it is printPlacesLived , here this is obj.

const user = {
    name: 'srk',
    cities: ['hyd','mumbai', 'pune']
    printPlacesLived: function() {
    this.cities.forEach((city) => {    changed to arrow func. now this.name do not throw error
        c.l(this.name + ' has lived in '+ city)
    })
    }
}

for above ex, using of arrow func is adv. in some cases arrow func is not suitable
here if we use printPlacesLived prop func as arrow func we get error for this.cities as it will
not bind this keyword to the obj and will be mapped to global scope and here it is undefined

we can use es6 method 
const user = {
    name: 'srk',
    cities: ['hyd','mumbai', 'pune']
    printPlacesLived() { //cannot use arrow func here. use es6 new method definition syntax
    this.cities.forEach((city) => {    
        c.l(this.name + ' has lived in '+ city)
    })
    }
}

instead of forEach we can use map array method

forEach: run for each and every item of the array and do not return new array
 this.cities.forEach((city) => {    
        c.l(this.name + ' has lived in '+ city)
    })

map: creates a new array. does not affect this.cities array
const cityMessages = this.cities.map((city) => {    
        return this.city + ' has lived in ' + city
    })
c.l(cityMessages) -- ['cityone','cityTwo',..]

instead of creating cityMessages var just return it.

events and attributes
events - user interactions - button click
<button id="idone" class="button"><button>
error: unknown DOM property class, Did you mean className?
we cannot set attribute as class, class is a reserve keyword in Javascript. in JSX instead of class use className. Renamed
<button id="idone" className="button"><button>

let count = 0
const templateTwo = (
    <div>
        <h1>count: {count}</h1>
        <button id="someidhere"></button>
    </div>
)
c.l(templateTwo) --- return obj. children > h1 and p > className prop
google - react DOM elements. in html autofocus but in react dom autoFocus - camelCased

goal is to set up event listner
we can pass expression to id value
const someId = 'someIDhere'
let count = 0
const templateTwo = (
    <div>
        <h1>count: {count}</h1>
        <button id={someId}>+1</button>
    </div>
)

we can pass attribute as onClick which is an event and this event is triggered on user click.
define a function and refer it as value for the prop as jsx expression.

const addOne = () => {
    console.log('addOne')
}
const templateTwo = (
    <div>
        <h1>count: {count}</h1>
        <button onClick={addOne}>+1</button>
        <button onClick={minusOne}>-1</button> //define minusOne func.

    </div>
)
instead of referencing addOne variable name we can create function inside jsx expression. but if we have many function
readibility issue.

1. templateTwo only renders once, onClick method executes but templateTwo do not rerender. to re-render our 
template again we have to create a func and put templateTwo and ReactDOM.render() method in that func
so when a user click on button and a value changes we have to rerenders our template here we just need to call the func which has templateTwo and ReactDOM.render()


const addOne = () => {
    count++
    rerenderApp()}
const minusOne = () => {
    count--
    rerenderApp()}
const reset = () => {
    count = 0
    rerenderApp()}

let count = 0
const rerenderApp = () => {
    const templateTwo = (
    <div>
        <h1>Count: {count}</h1>
        <button onClick={addOne}>+1</button>
        <button onClick={minusOne}>-1</button>
        <button onClick= {reset}>Reset</button>
        </div>)
 ReactDOM.render(templateTwo, appRoot)
}
var appRoot = document.getElementById('app')
rerenderApp()

Though the value count is updating when user click on +1 but our app is not rerendering the template. to rerender defining func with template and ReactDOM.render() func call and using this func where ever we want our app to rerender.

React virtual dom:
currently we are rendering whole page only for single value change i.e count 0 or 1

in ui - elements tab
if you change any dom element there will be animation shown.{flash animation says which element is changed}

we defined h1 element, count is static text and value is dynamic
react adds comments, react uses these comments

react uses virtual DOM algorithms in JS to determine chnages made in app and renders only that part will be replaced or renders.

single piece of our app state changes like a number, we can rerender the app, updating the user without worrying about slowing down the user and not wasting the resources. virtual dom algo run behind the scenes this is done in js
virtual dom calculates if any changes to be made calculates min no.of changes hence efficient.

React.createElement() --returns obj represents our entire JSX tree , use algo to compare two objects. this is what react is doing. 

Forms and inputs:::
create a form 

var app = {
    title: 'Indecision App',
    subTitle: 'Put your life in the hands of a computer',
    options: []
}

const onFormSubmit = (e) => {
    e.preventDefault()
    const option = e.target.elements.inputform.value
    //target has element which user interacted. target obj has elements and we defined input element with name = input form
    //we can access input form value fromm value attribute

    if(option) {    //checking if user enter entered anything in input form
        app.options.push(option)        //pushing user entered text to options array
        e.target.elements.inputform.value = ''  //setting input field to null after user entering text
        render()
    }
}
const render = () => {  //creating render method - using this to rerender ui. contains template and reactdom.render method
    var templateTwo = (
        <div>
            <h1>{app.title}</h1>
            {app.subTitle && <p>{app.subTitle}</p>}
            <p>{(app.options.length >0) ? 'Here are your options' : 'No options' }</p>
            {app.options.length} //displaying length count
            <ol>
                {app.options.map((option)=>{      //creating ol tag and creating li tags and displaying options array
                return <li key={option}>{option}</li> //we have to set key else throw error
                })}
            </ol>
            <form onSubmit={onFormSubmit}> //on submit we are calling onFormSubmit func.
                <input type="text" name="inputform"/>
                <button> Add option</button>
            </form>
        </div>
    )
    ReactDOM.render(templateTwo, appRoot)  
}

var appRoot = document.getElementById('app')
render()
Error: when you do not specify key :> Each child in a list should have a unique "key" prop.

JSX works with arrays.
{
    [11,22,33, null, undefined] //null and undefined are ignored by JSX. can put number,string , null but not object.
}

{
    [99,97, 96] - o/p 999796. jsx takes array and break it to ind peices. each peice has comments {react-text: 8} 
}

{<p>1</p>} - JSX in JSX.
{map{jsx}}
            <ol>
             {app.options.map((option)=>{
                return <li key={option}>{option}</li>
                })}
            </ol>

Now the task is to : ask computer to select a option. Two steps
create a button and do function call on clicking on it.

1. <button disabled={app.options.length === 0} onClick={selectOption}>what should I select?</button>
disabled={treu/false} so we are checking if the length of array is 0, if yes disabled else display

2. const selectOption = () => {
    const randomNum = Math.floor(Math.random() * app.options.length)
    alert(app.options[randomNum])
    render()
}
we need random otpion so Math.random() gives random no. in b/w 0 - 0.999 we need to Multiply it with app.options items
if items 3 then 3 times 

Math.floor rounds the value. decimals values

re render the app -render()


Task 2: toggle button - show details - display some text
create a variable visibility and set it to false. default one.
let visibility = false; 

const showDetails = () => {
    visibility = !visibility //flip the var value when user click on it
    render()
}
 <button onClick={showDetails}> //event handler onclick we call showDetails, which flips the value.
    { visibility ? 'Hide details' : 'Show details'} //default one is false so display show details
                                    //when user click on button we change button name to hide details
         </button>
         <p>{visibility && 'Education, Profile and native place'}</p> //if visibility true we display the text
    </div>






























































